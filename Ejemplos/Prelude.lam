def I = \x:E. x

def K = \x:E.\y:E.x

def S = \x:E->E->E.\y:E->E.\z:E.(x z) (y z)


-- Ejercicio 5
def succ = (\tUno:Nat.suc tUno)
def ackInt = \rec:Nat->Nat.\n:Nat. R (rec (suc 0)) (\recInt:Nat.\t:Nat.rec recInt) n
def ack = \m:Nat. R succ (\rec:Nat->Nat.\t:Nat. ackInt rec) m


-- Ejercicio 7
def tDos = \n: Nat. \l:ListN . \x:ListN . (cons (suc n) x)
def mapUno = \l : ListN. RL nil (tDos) l

def sumUnoLista = \n: Nat. \l:ListN . \x:ListN . (cons (suc n) (mapUno x))
def mapPos = \l : ListN. RL nil (sumUnoLista) l

